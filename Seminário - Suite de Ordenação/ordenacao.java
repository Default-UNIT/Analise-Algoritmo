/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;

/**
 *
 * @author wferr
 */
public class ordenacao extends javax.swing.JFrame {

    /**
     * Creates new form ordenacao
     */
    public ordenacao() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtNums = new javax.swing.JTextField();
        calcular = new javax.swing.JButton();
        boxOpc = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Ordenação");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Laryssa, Leo e Walter");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(135, 135, 135))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(99, 99, 99))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Digite um Conjunto de Números");

        calcular.setBackground(new java.awt.Color(204, 204, 204));
        calcular.setText("Calcular");
        calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularActionPerformed(evt);
            }
        });

        boxOpc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "InsertionSort", "BubbleSort", "Selection", "RadixSort" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNums))
                .addContainerGap(82, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(boxOpc, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(111, 111, 111))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(calcular)
                        .addGap(153, 153, 153))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtNums, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(boxOpc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(calcular, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(132, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void calcularActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
        int opc = boxOpc.getSelectedIndex();
        
        String nums = txtNums.getText();
        String[] vetorAux = nums.split(", ");
        
        int tamanho = vetorAux.length;
        int[] vetor = new int[tamanho];

        for(int i = 0; i < tamanho; i++) {
            vetor[i] = Integer.parseInt(vetorAux[i]);
        }
        
        switch (opc) {
            case 0:               
                long tinicialIS = System.nanoTime();
                int aux, j;
                  
                 //Laço de repetição para percorrer a lista
                 for (int i = 1; i < vetor.length; i++) {
                     //Auxiliar para melhor leitura
                     aux = vetor[i];
                     //Indice do vetor
                     j = i - 1;

                     //Enquanto as 2 opções forem Verdadeiras
                     while(j >= 0 && aux < vetor[j]) {
                         //O num q estava na posição j+1 vai ocupar a posição j
                         vetor[j+1] = vetor[j];
                         //Caso o aux precise andar mais de uma casa para esquerda
                         j--;
                     }
                     vetor[j+1] = aux;
                 }
                 long tfinalIS = System.nanoTime();
                 //Imprimindo a lista Ordenada
                 JOptionPane.showMessageDialog(rootPane,"Lista Ordenada: " + Arrays.toString(vetor)
                 + "\n" +(tfinalIS - tinicialIS) + " nanosegundos");
                break;
            case 1:
                    long tinicialBS = System.nanoTime();

                    boolean valorTrocar = false;

                    for(int i = 1; i <= tamanho; i++) { // Laço de repetição
                        if(i == tamanho) { //Se i igual ao tamanho do vetor:
                            if(!valorTrocar) break; //Se a varariável "valorTroca" for VERDADEIRA, encerra o laço

                            //Caso nãa esteja tudo OK!
                            valorTrocar = false;
                            i = 1;
                        }

                        if(vetor[i - 1] > vetor[i]) { //Caso o número esquerdo da lista seja maior que o da direita:
                            aux = vetor[i - 1]; //Auxiliar receberá o número da esquerda
                            vetor[i - 1] = vetor[i]; //Outra troca aacontece, agora o mesmo número da esquerda troca com o número da direita
                            vetor[i] = aux; //Número da direita recebe o Auxiliar
                            valorTrocar = true; //Troca a variável "valorTroca" para verdadeiro após a execução do IF
                        }
                    }

                    long tfinalBS = System.nanoTime();
                    JOptionPane.showMessageDialog(rootPane,"Lista Ordenada: " + Arrays.toString(vetor)
                 + "\n" +(tfinalBS - tinicialBS) + " nanosegundos");
                break;
                
            case 2:
                 long tinicialSS = System.nanoTime();
                 for (int i = 0; i < vetor.length; i++) {
                    int imenor = i;
                    for (int iseguinte = i+1; iseguinte < vetor.length; ++iseguinte) {
                        if (vetor[iseguinte] < vetor[imenor]) {
                            imenor = iseguinte;
                        }
                    }
                    aux = vetor[i];
                    vetor[i] = vetor[imenor];
                    vetor[imenor] = aux;
                }
                long tfinalSS = System.nanoTime();
                JOptionPane.showMessageDialog(rootPane,"Lista Ordenada: " + Arrays.toString(vetor)
                 + "\n" +(tfinalSS - tinicialSS) + " nanosegundos");
                 
                 break;
            
            case 3:
                long tinicialRS = System.nanoTime();

                int RADIX = 10;

                ArrayList<Integer> auxVetor[] = new ArrayList[RADIX];
                for (int i = 0; i < auxVetor.length; i++) {
                    auxVetor[i] = new ArrayList<>();
                }

                boolean maxDigito = false;
                int temp = -1, auxRS = 1;

                while (!maxDigito) {
                    maxDigito = true;

                    for (Integer element : vetor) {
                        temp = element / auxRS;
                        auxVetor[temp % RADIX].add(element);

                        if (maxDigito && temp > 0) {
                            maxDigito = false;
                        }
                    }

                    int a = 0;

                    for (int k = 0; k < RADIX; k++) {
                        for (Integer i : auxVetor[k]) {
                            vetor[a++] = i;
                        }
                        auxVetor[k].clear();
                    }

                    auxRS *= RADIX;
                }

                long tfinalRS = System.nanoTime();

                 JOptionPane.showMessageDialog(rootPane,"Lista Ordenada: " + Arrays.toString(vetor)
                 + "\n" +(tfinalRS - tinicialRS) + " nanosegundos");
                
                break;
                
            default:
                
                break;
        }
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ordenacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ordenacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ordenacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ordenacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ordenacao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JComboBox<String> boxOpc;
    private javax.swing.JButton calcular;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField txtNums;
    // End of variables declaration                   
}
